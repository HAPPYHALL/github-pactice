#아래 코드의 실행 결과를 예상해보세요.
a = "3"
b = "4"
print(a + b)

#아래 코드의 실행 결과를 예상해보세요.
print("Hi" * 3)

#화면에 '-'를 80개 출력하세요.
print("-"*80)

#변수에 다음과 같은 문자열이 바인딩되어 있습니다.
#변수에 문자열 더하기와 문자열 곱하기를 사용해서 아래와 같이 출력해보세요.
#python java python java python java python java
t1 = 'python'
t2 = 'java'
#print((t1+t2)*3) -> X ,간격을 만드려면 +' '를 추가하면되고, 반복문을 위해 새로운 행렬을 추가해서 간단하게 나타낸다.
t3 = t1+' '+t2+' '
print(t3*4)

#035 문자열 출력

#변수에 다음과 같이 문자열과 정수가 바인딩되어 있을 때 % formatting을 사용해서 다음과 같이 출력해보세요.
#이름: 김민수 나이: 10
#이름: 이철희 나이: 13

name1 = "김민수"
age1 = 10
name2 = "이철희"
age2 = 13
#print 포맷팅에서 %s는 문자열 데이터 타입의 값을,
# %d는 정수형 데이터 타입 값의 출력을 의미합니다.
print("이름: %s 나이: %d" % (name1, age1))
print("이름: %s 나이: %d" % (name2, age2))

#036 문자열 출력
#문자열의 format( ) 메서드를 사용해서 035번 문제를 다시 풀어보세요.
name1 = "김민수"
age1 = 10
name2 = "이철희"
age2 = 13
#문자열의 포맷 메서드는 타입과 상관없이 값이 출력될 위치에 { }를 적어주면 됩니다.
print("이름: {} 나이: {}".format(name1, age1))
print("이름: {} 나이: {}".format(name2, age2))

#037 문자열 출력
#파이썬 3.6부터 지원하는 f-string을 사용해서 035번 문제를 다시 풀어보세요.
name1 = "김민수"
age1 = 10
name2 = "이철희"
age2 = 13
#f-string은 문자열 앞에 f가 붙은 형태입니다.
# f-string을 사용하면 {변수}와 같은 형태로 문자열 사이에 타입과 상관없이 값을 출력할 수 있습니다.
print(f"이름: {name1} 나이: {age1}")
print(f"이름: {name2} 나이: {age2}")


#038 컴마 제거하기
#삼성전자의 상장주식수가 다음과 같습니다. 컴마를 제거한 후 이를 정수 타입으로 변환해보세요.
상장주식수 = "5,969,782,550"

컴마제거 = 상장주식수.replace(",", "")
타입변환 = int(컴마제거)
print(타입변환, type(타입변환))
#정수형으로 타입을 변환하려면 int( ) 함수를 사용하면 됩니다.
#이때 숫자 형태의 문자열에 컴마가 있는 경우 바로 변환된지 않습니다.
#먼저 문자열의 replace 메서드로 컴마를 제거한 후 변환해야합니다.



#039 문자열 슬라이싱
#다음과 같은 문자열에서 '2020/03'만 출력하세요.
분기 = "2020/03(E) (IFRS연결)"
print(분기[:7])
#문자열에서 슬라이싱을 사용하면 여러 글자를 접근할 수 있습니다.



#040 strip 메서드
#문자열의 좌우의 공백이 있을 때 이를 제거해보세요.
data = "   삼성전자    "
data1 = data.strip()
print(data1)
#문자열에서 strip( ) 메서드를 사용하면 좌우의 공백을 제거할 수 있습니다.
# 이때 원본 문자열은 그대로 유지되고 공백이 제거된 새로운 문자열이 반환됩니다.


#041 upper 메서드
#다음과 같은 문자열이 있을 때 이를 대문자 BTC_KRW로 변경하세요.
ticker = "btc_krw"
ticker1 = ticker.upper()
print(ticker1)
#upper 메서드를 호출하면 문자열을 대문자로 만들 수 있습니다. 다만 이 경우에도 원본 문자열은 유지되고 대문자로 변경된 새로운 문자열 객체가 반환되는 겁니다.
#반환된 새로운 객체를 새로운 변수로 바인딩한 후 이를 print 함수로 출력하면 됩니다.


#042 lower 메서드
#다음과 같은 문자열이 있을 때 이를 소문자 btc_krw로 변경하세요.
ticker = "BTC_KRW"
ticker1 =  ticker.lower()
print(ticker1)


#043 capitalize 메서드 (1.대문자로 쓰다[인쇄하다], (단어를) 대문자로 시작하다)
#문자열 'hello'가 있을 때 이를 'Hello'로 변경해보세요.
a = "hello"
a = a.capitalize()
print(a)



#044 endswith 메서드
#파일 이름이 문자열로 저장되어 있을 때 endswith 메서드를 사용해서 파일 이름이 'xlsx'로 끝나는지 확인해보세요.file_name = "보고서.xlsx"
file_name = "보고서.xlsx"
file_name.endswith("xlsx")
print(file_name)




#045 endswith 메서드
#파일 이름이 문자열로 저장되어 있을 때 endswith 메서드를 사용해서 파일 이름이 'xlsx' 또는 'xls'로 끝나는지 확인해보세요.
file_name = "보고서.xlsx"
file_name.endswith(("xlsx", "xls"))
print(file_name)

#046 startswith 메서드
#파일 이름이 문자열로 저장되어 있을 때 startswith 메서드를 사용해서 파일 이름이 '2020'로 시작하는지 확인해보세요.
file_name = "2020_보고서.xlsx"
file_name.startswith("2020")
print(file_name)

#047 split 메서드
#다음과 같은 문자열이 있을 때 공백을 기준으로 문자열을 나눠보세요.
a = "hello world"
a.split()
print(a)



#048 split 메서드
#다음과 같이 문자열이 있을 때 btc와 krw로 나눠보세요.
ticker = "btc_krw"
ticker.split("_")
#문자열에서 split() 메서드는 문자열을 분리할 때 사용합니다.
#이때 어떤 값을 넘겨주면 그 값을 기준으로 문자열을 분리해줍니다.
#------------> 실행안됨


#049 split 메서드
#다음과 같이 날짜를 표현하는 문자열이 있을 때 연도, 월, 일로 나눠보세요.
date = "2020-05-01"
date.split("-")
#------------> 실행안됨


#050 rstrip 메서드
#문자열의 오른쪽에 공백이 있을 때 이를 제거해보세요.
data = "039490     "
data = data.rstrip()
#rstrip() 메서드를 사용하면 오른쪽 공백이 제거된 새로운 문자열 객체가 반환됩니다.
# 그 값을 data라는 변수가 새로 바인딩합니다.
# 기존의 공백이 포함된 문자열은 메모리에서 자동으로 삭제됩니다.
#------------> 실행안됨

#051 리스트 생성
#2016년 11월 영화 예매 순위 기준 top3는 다음과 같습니다.
# 영화 제목을 movie_rank 이름의 리스트에 저장해보세요.(순위 정보는 저장하지 않습니다.)

movie_rank = ["닥터 스트레인지", "스플릿", "럭키"]
#영화 제목은 문자열로 표현 가능합니다.
#여러 개의 값을 저장하기 위해 파이썬 리스트 자료형을 사용합니다.





