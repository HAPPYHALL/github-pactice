#061
#price 변수에는 날짜와 종가 정보가 저장돼 있다. 날짜 정보를 제외하고 가격 정보만을 출력하라. (힌트 : 슬라이싱)
price = ['20180728', 100, 130, 140, 150, 160, 170]
print(price[1:])

#062
#슬라이싱을 사용해서 홀수만 출력하라.
nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(nums[::2])

#063
#슬라이싱을 사용해서 짝수만 출력하라.
nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(nums[1::2])


#064
#슬라이싱을 사용해서 리스트의 숫자를 역 방향으로 출력하라.
nums = [1, 2, 3, 4, 5]
print(nums[::-1])


#065
#interest 리스트에는 아래의 데이터가 바인딩되어 있다.
interest = ['삼성전자', 'LG전자', 'Naver']
#interest 리스트를 사용하여 아래와 같이 화면에 출력하라.
# 삼성전자 Naver
print(interest[0], interest[2])


#066 join 메서드
#interest 리스트에는 아래의 데이터가 바인딩되어 있다.
interest = ['삼성전자', 'LG전자', 'Naver', 'SK하이닉스', '미래에셋대우']
#interest 리스트를 사용하여 아래와 같이 화면에 출력하라.
#삼성전자 LG전자 Naver SK하이닉스 미래에셋대우
print(" ".join(interest))


#067 join 메서드
interest = ['삼성전자', 'LG전자', 'Naver', 'SK하이닉스', '미래에셋대우']
#문자열의 join 메서드를 사용하면 리스트를 문자열로 붙일 수 있습니다.
print("/".join(interest))


#068 join 메서드
interest = ['삼성전자', 'LG전자', 'Naver', 'SK하이닉스', '미래에셋대우']
print("\n".join(interest))



#069 문자열 split 메서드
#회사 이름이 슬래시 ('/')로 구분되어 하나의 문자열로 저장되어 있다.
string = "삼성전자/LG전자/Naver"
#이를 interest 이름의 리스트로 분리 저장하라.
interest = string.split("/")
print(interest)


#070 리스트 정렬
#리스트에 있는 값을 오름차순으로 정렬하세요.
data = [2, 4, 3, 1, 5, 10, 9]
data.sort()
print(data)

data = [2, 4, 3, 1, 5, 10, 9]
data2 = sorted(data)
print(data2)

#071
#my_variable 이름의 비어있는 튜플을 만들라.
#괄호는 튜플을 정의하는 기호입니다.
my_variable = ()
#정말 튜플이 생성됐는지 확인해 봅시다. type() 함수는 변수에 바인딩된 데이터의 타입을 반환합니다.
print(type(my_variable))

#073
#숫자 1 이 저장된 튜플을 생성하라.
#아래와 같이 괄호와 함께 하나의 정숫값을 저장하면 튜플이 정의 될것 같지만 그렇지 않습니다. type()을 출력해보면 파이썬은 튜플이 아닌 정수로 인식합니다.
my_tuple = (1)
type (my_tuple)
print(type(my_tuple))

my_tuple = (1,)
type (my_tuple)
print(type(my_tuple))

print(my_tuple)



#074
#다음 코드를 실행해보고 오류가 발생하는 원인을 설명하라.
#t = (1, 2, 3)
#t[0] = 'a'

#TypeError: 'tuple' object does not support item assignment
#tuple은 원소(element)의 값을 변경할 수 없습니다.


#075
#아래와 같이 t에는 1, 2, 3, 4 데이터가 바인딩되어 있다. t가 바인딩하는 데이터 타입은 무엇인가?
t = 1, 2, 3, 4

#원칙적으로 튜플은 괄호와 함께 데이터를 정의해야 하지만, 사용자 편의를 위해 괄호 없이도 동작합니다.



#076
#변수 t에는 아래와 같은 값이 저장되어 있다. 변수 t가 ('A', 'b', 'c') 튜플을 가리키도록 수정 하라.
#t = ('a', 'b', 'c')  -> t[0] = 'A'
#튜플의 값은 변경할 수 없기 때문에, 리스트와 달리 아래 코드는 동작하지 않습니다.
t = ('A', 'b', 'c')
#새로운 튜플을 만들고 t 라는 변수를 업데이트 해야 합니다. 기존의 튜플 ('a', 'b', 'c')은 자동으로 삭제됩니다.
print(t)


#077
#다음 튜플을 리스트로 변환하라.
interest = ('삼성전자', 'LG전자', 'SK Hynix')
data = list(interest)
print(data)


#078
#다음 리스트를 튜플로 변경하라.
interest = ['삼성전자', 'LG전자', 'SK Hynix']
data = tuple(interest)
print(data)


#079 튜플 언팩킹
#다음 코드의 실행 결과를 예상하라.
temp = ('apple', 'banana', 'cake')
a, b, c = temp
print(a, b, c)


#080 range 함수
#1 부터 99까지의 정수 중 짝수만 저장된 튜플을 생성하라.
data = tuple(range(2, 100, 2))
print( data )


#081 별 표현식********************
#기본적으로 데이터 언패킹은 좌변의 변수와 우변 데이터 개수가 같아야 합니다.
# 하지만 star expression을 사용하면 변수의 개수가 달라도 데이터 언패킹을 할 수 있습니다.
# 튜플에 저장된 데이터 중에서 앞에 있는 두 개의 데이터만 필요할 경우 나머지 데이터의 언패킹 코드를 작성할 필요가 없습니다.

#다음과 같이 10개의 값이 저장된 scores 리스트가 있을 때, start expression을 사용하여 좌측 8개의 값을 valid_score 변수에 바인딩하여라.
scores = [8.8, 8.9, 8.7, 9.2, 9.3, 9.7, 9.9, 9.5, 7.8, 9.4]
*valid_score, _, _= scores
print(valid_score)



#082
#다음과 같이 10개의 값이 저장된 scores 리스트가 있을 때, start expression을 사용하여 우측 8개의 값을 valid_score 변수에 바인딩하여라.
scores = [8.8, 8.9, 8.7, 9.2, 9.3, 9.7, 9.9, 9.5, 7.8, 9.4]
a, b, *valid_score = scores
print(valid_score)


#083
#다음과 같이 10개의 값이 저장된 scores 리스트가 있을 때, start expression을 사용하여 가운데 있는 8개의 값을 valid_score 변수에 바인딩하여라.
scores = [8.8, 8.9, 8.7, 9.2, 9.3, 9.7, 9.9, 9.5, 7.8, 9.4]
a, *valid_score, b = scores
print(valid_score)

#084 비어있는 딕셔너리
#temp 이름의 비어있는 딕셔너리를 만들라.
# 정답 : temp = { }


#085
#다음 아이스크림 이름과 희망 가격을 딕셔너리로 구성하라.
ice = {"메로나": 1000, "폴라포": 1200, "빵빠레": 1800}
print(ice)

#086
#085 번의 딕셔너리에 아래 아이스크림 가격정보를 추가하라.
ice = {"메로나": 1000, "폴라포": 1200, "빵빠레": 1800}
ice["죠스바"] = 1200
ice["월드콘"] = 1500
print(ice)

#087
#다음 딕셔너리를 사용하여 메로나 가격을 출력하라.
ice = {'메로나': 1000,
       '폴로포': 1200,
       '빵빠레': 1800,
       '죠스바': 1200,
       '월드콘': 1500}
print("메로나 가격: ", ice["메로나"])


#088
#다음 딕셔너리에서 메로나의 가격을 1300으로 수정하라.

ice = {'메로나': 1000,
       '폴로포': 1200,
       '빵빠레': 1800,
       '죠스바': 1200,
       '월드콘': 1500}
ice["메로나"] = 1300
print(ice["메로나"])


#089
#다음 딕셔너리에서 메로나를 삭제하라.

ice = {'메로나': 1000,
       '폴로포': 1200,
       '빵빠레': 1800,
       '죠스바': 1200,
       '월드콘': 1500}
del ice["메로나"]
print(ice)


#090
#다음 코드에서 에러가 발생한 원인을 설명하라.
icecream = {'폴라포': 1200, '빵빠레': 1800, '월드콘': 1500, '메로나': 1000}
#icecream['누가바']
#딕셔너리에 없는 키를 사용해서 인덱싱하면 에러가 발생합니다.

exit()
